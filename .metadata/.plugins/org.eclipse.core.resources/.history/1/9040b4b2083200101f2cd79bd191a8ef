package com.tienda.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
public class SecurityConfig {
	
	private final JwtUtil jwtUtil;
	private final AuthenticationConfiguration authenticationConfiguration;
	
	public SecurityConfig(JwtUtil jwtUtil, AuthenticationConfiguration authenticationConfiguration) {
		this.jwtUtil = jwtUtil;
		this.authenticationConfiguration = authenticationConfiguration;
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http
			// Deshabiliter CSFR (no necesario para APIs REST con JWT)
			.csfr(csfr -> csfr.disable())
			// Configurar autorización de rutas
			.authorizeHttpRequests(auth -> auth
					// Permitir acceso público a las rutas de autenticación
					.requestMatchers("/api/auth/**").permitAll()
					// Requerir autenticación para todas las demás rutas
					.anyRequest().authenticated()
			)
			// Configurar la gestión de sesiones como stateless (sin estado)
			.sessionManagement(session -> session
					.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
			)
			// Agregar el filtro JWT antes del filtro de autenticación por nombre/usuario(contraseña
			.addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);
		
		return http.build();
	}
	
	// @Bean
	// public AuthenticationManager authenticationManagerBean() throws Exception {
	//	return super.authenticationManaerBean();
	// }
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	
	
	
	
	

}
